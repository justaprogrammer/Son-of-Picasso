// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SonOfPicasso.Data.Repository;

namespace SonOfPicasso.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190930211055_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("SonOfPicasso.Data.Model.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("SonOfPicasso.Data.Model.AlbumImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ImageId");

                    b.ToTable("AlbumImages");
                });

            modelBuilder.Entity("SonOfPicasso.Data.Model.ExifData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrightnessValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("ColorSpace")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompressedBitsPerPixel")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contrast")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomRendered")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeDigitized")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeOriginal")
                        .HasColumnType("TEXT");

                    b.Property<string>("DigitalZoomRatio")
                        .HasColumnType("TEXT");

                    b.Property<string>("DocumentName")
                        .HasColumnType("TEXT");

                    b.Property<uint>("EXIFIFDPointer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExifVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExposureBiasValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExposureMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExposureProgram")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExposureTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("Flash")
                        .HasColumnType("TEXT");

                    b.Property<string>("FlashpixVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("FocalLength")
                        .HasColumnType("TEXT");

                    b.Property<ushort>("FocalLengthIn35mmFilm")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("ISOSpeedRatings")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageDescription")
                        .HasColumnType("TEXT");

                    b.Property<uint>("InteroperabilityIFDPointer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InteroperabilityIndex")
                        .HasColumnType("TEXT");

                    b.Property<string>("InteroperabilityVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("LensSpecification")
                        .HasColumnType("TEXT");

                    b.Property<string>("LightSource")
                        .HasColumnType("TEXT");

                    b.Property<string>("Make")
                        .HasColumnType("TEXT");

                    b.Property<string>("MaxApertureValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("MeteringMode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .HasColumnType("TEXT");

                    b.Property<string>("Orientation")
                        .HasColumnType("TEXT");

                    b.Property<uint>("PixelXDimension")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PixelYDimension")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ResolutionUnit")
                        .HasColumnType("TEXT");

                    b.Property<string>("Saturation")
                        .HasColumnType("TEXT");

                    b.Property<string>("SceneCaptureType")
                        .HasColumnType("TEXT");

                    b.Property<string>("SceneType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sharpness")
                        .HasColumnType("TEXT");

                    b.Property<string>("Software")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailCompression")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ThumbnailDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailImageDescription")
                        .HasColumnType("TEXT");

                    b.Property<uint>("ThumbnailJPEGInterchangeFormat")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ThumbnailJPEGInterchangeFormatLength")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ThumbnailMake")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailModel")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailOrientation")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailResolutionUnit")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailSoftware")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailXResolution")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailYCbCrPositioning")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThumbnailYResolution")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserComment")
                        .HasColumnType("TEXT");

                    b.Property<string>("WhiteBalance")
                        .HasColumnType("TEXT");

                    b.Property<string>("XResolution")
                        .HasColumnType("TEXT");

                    b.Property<string>("YCbCrPositioning")
                        .HasColumnType("TEXT");

                    b.Property<string>("YResolution")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ExifData");
                });

            modelBuilder.Entity("SonOfPicasso.Data.Model.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("SonOfPicasso.Data.Model.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExifDataId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FolderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExifDataId");

                    b.HasIndex("FolderId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SonOfPicasso.Data.Model.AlbumImage", b =>
                {
                    b.HasOne("SonOfPicasso.Data.Model.Album", "Album")
                        .WithMany("AlbumImages")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SonOfPicasso.Data.Model.Image", "Image")
                        .WithMany("AlbumImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SonOfPicasso.Data.Model.Image", b =>
                {
                    b.HasOne("SonOfPicasso.Data.Model.ExifData", "ExifData")
                        .WithMany()
                        .HasForeignKey("ExifDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SonOfPicasso.Data.Model.Folder", "Folder")
                        .WithMany("Images")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
