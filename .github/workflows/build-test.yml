name: Build and Test
on: [push]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.0.100
    - name: Install Semantic Release Tools
      run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git commit-analyzer-cli
    - name: GitVersion
      run: GitVersion /updateassemblyinfo src\common\SharedAssemblyInfo.cs /ensureassemblyinfo /output BuildServer
    - name: Build
      run: dotnet build SonOfPicasso.sln --configuration "Release"
    - name: Publish
      run: dotnet publish SonOfPicasso.sln --configuration "Release"
    - name: Test SonOfPicasso.Core.Tests
      run: |-
        $output = dotnet vstest src\SonOfPicasso.Core.Tests\bin\Release\netcoreapp3.0\publish\SonOfPicasso.Core.Tests.dll `
          --logger:"trx;LogFileName=SonOfPicasso.Core.Tests.trx" `
          --ResultsDirectory:reports `
          --collect:"XPlat code coverage" `
          --settings:"src\coverletArgs.runsettings"
        echo $output
        $ENV:lastCoverageReport = ($output -match "opencover").Trim()
    - name: Upload SonOfPicasso.Core.Tests to CodeCov
      uses: codecov/codecov-action@v1.0.3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: $ENV:lastCoverageReport
        flags: coretests
    - name: Test SonOfPicasso.Data.Tests
      run: |-
        $output = dotnet vstest src\SonOfPicasso.Data.Tests\bin\Release\netcoreapp3.0\publish\SonOfPicasso.Data.Tests.dll `
          --logger:"trx;LogFileName=SonOfPicasso.Data.Tests.trx" `
          --ResultsDirectory:reports `
          --collect:"XPlat code coverage" `
          --settings:"src\coverletArgs.runsettings"
        echo $output
        $ENV:lastCoverageReport = ($output -match "opencover").Trim()
    - name: Upload SonOfPicasso.Data.Tests to CodeCov
      uses: codecov/codecov-action@v1.0.3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: $ENV:lastCoverageReport
        flags: coretests
    - name: Test SonOfPicasso.UI.Tests
      run: |-
        $output = dotnet vstest src\SonOfPicasso.UI.Tests\bin\Release\netcoreapp3.0\publish\SonOfPicasso.UI.Tests.dll `
          --logger:"trx;LogFileName=SonOfPicasso.UI.Tests.trx" `
          --ResultsDirectory:reports `
          --collect:"XPlat code coverage" `
          --settings:"src\coverletArgs.runsettings"
        echo $output
        $ENV:lastCoverageReport = ($output -match "opencover").Trim()
    - name: Upload SonOfPicasso.UI.Tests to CodeCov
      uses: codecov/codecov-action@v1.0.3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: $ENV:lastCoverageReport
        flags: coretests
    - name: Test SonOfPicasso.Tools.Tests
      run: |-
        $output = dotnet vstest src\SonOfPicasso.Tools.Tests\bin\Release\netcoreapp3.0\publish\SonOfPicasso.Tools.Tests.dll `
          --logger:"trx;LogFileName=SonOfPicasso.Tools.Tests.trx" `
          --ResultsDirectory:reports `
          --collect:"XPlat code coverage" `
          --settings:"src\coverletArgs.runsettings"
        echo $output
        $ENV:lastCoverageReport = ($output -match "opencover").Trim()
    - name: Upload SonOfPicasso.Tools.Tests to CodeCov
      uses: codecov/codecov-action@v1.0.3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: $ENV:lastCoverageReport
        flags: coretests
    - name: Test SonOfPicasso.Integration.Tests
      run: |-
        $output = dotnet vstest src\SonOfPicasso.Integration.Tests\bin\Release\netcoreapp3.0\publish\SonOfPicasso.Integration.Tests.dll ``
          --logger:"trx;LogFileName=SonOfPicasso.Integration.Tests.trx" `
          --ResultsDirectory:reports `
          --collect:"XPlat code coverage" `
          --settings:"src\coverletArgs.runsettings"
        echo $output
        $ENV:lastCoverageReport = ($output -match "opencover").Trim()
    - name: Upload SonOfPicasso.Integration.Tests to CodeCov
      uses: codecov/codecov-action@v1.0.3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: $ENV:lastCoverageReport
        flags: coretests
    - name: Run
      run: |-
        Get-ChildItem -Recurse
    - name: Semantic Release
      run: semantic-release
      
